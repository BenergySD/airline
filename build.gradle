apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "maven"

task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
	distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

allprojects {
	group = "com.complexible.airline"
	sourceCompatibility = '1.6'
	targetCompatibility = '1.6'
	version = "0.7.3"

	repositories {
		mavenCentral()
	}
}

ext {
	projectDescription	= "Airline is a Java annotation-based framework for parsing Git like command line structures."
	projectUrl			= "https://github.com/clarkparsia/airline"
}


dependencies {
	compile 'javax.inject:javax.inject:1'
	compile "com.google.guava:guava:18.0"
	compile 'com.google.code.findbugs:jsr305:3.0.0'

	testCompile 'org.testng:testng:6.0.1'
}

if (project.hasProperty('artifactoryUrl')
	&& project.hasProperty('artifactoryUsername')
	&& project.hasProperty('artifactoryPassword')) {


	task('uploadArtifactory', type: Upload) {
		description = 'publishes artifacts to the artifactory repository.'
		configuration = configurations.archives
		repositories {
			mavenDeployer {
				repository(url: artifactoryUrl) {
					authentication(userName: artifactoryUsername, password: artifactoryPassword)
				}
				pom.project {
					name = archivesBaseName
					packaging = 'jar'
					description projectDescription
					url  projectUrl
				}

				//mess with the generated pom to remove test dependencies from published artifacts
				pom.withXml { XmlProvider xmlProvider ->
					def xml = xmlProvider.asString()
					def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

					pomXml.dependencies.dependency.each { dep ->
						if (dep.scope.text() != 'compile') {
							def parent = dep.parent()
							parent.remove(dep)
						}
					}

					def newXml = new StringWriter()
					def printer = new XmlNodePrinter(new PrintWriter(newXml))
					printer.preserveWhitespace = true
					printer.print(pomXml)
					xml.setLength(0)
					xml.append(newXml.toString())
				}

			}
		}
	}
}
